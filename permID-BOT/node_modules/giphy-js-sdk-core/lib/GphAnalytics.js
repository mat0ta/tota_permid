'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Created by Cosmo Cochrane on 4/20/17.
 * Copyright (c) 2017 Giphy Inc.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

var url = 'https://pingback.giphy.com/pingback';
var eventTypes = {
  search: 'GIF_SEARCH',
  trending: 'GIF_TRENDING',
  related: 'GIF_RELATED',
  reactions: 'GIF_REACTIONS'
  /**
   * Class representing the networking client.
   */

};
var GphAnalytics = function () {
  function GphAnalytics(apiKey) {
    _classCallCheck(this, GphAnalytics);

    this.apiKey = apiKey;
  }

  /**
   * Initialize the SDK by passing in the apiKey.
   */


  _createClass(GphAnalytics, [{
    key: 'setCredentials',
    value: function setCredentials(apiKey) {
      this.apiKey = apiKey;
    }

    /**
     * @param {String} endpoint name of GIPHY endpoint used
     * @param {String} gifId ID associated with specific gif action
     * @param {String} userId unique identifier for logged in user
     * @param {String} responseId ID returned from
     */

  }, {
    key: 'onClick',
    value: function onClick(endpoint, gifId, userId, responseId) {
      var action = this.createEvent('click', gifId);
      this.fetchPingbackRequest(endpoint, action, userId, responseId);
    }

    /**
     * @param {String} endpoint name of GIPHY endpoint used
     * @param {String} gifId ID associated with specific gif action
     * @param {String} userId unique identifier for logged in user
     * @param {String} responseId ID returned from
     */

  }, {
    key: 'onHover',
    value: function onHover(endpoint, gifId, userId, responseId) {
      var action = this.createEvent('hover', gifId);
      this.fetchPingbackRequest(endpoint, action, userId, responseId);
    }

    /**
     * @param {String} endpoint name of GIPHY endpoint used
     * @param {String} gifId ID associated with specific gif action
     * @param {String} userId unique identifier for logged in user
     * @param {String} responseId ID returned from
     */

  }, {
    key: 'onSeen',
    value: function onSeen(endpoint, gifId, userId, responseId) {
      var action = this.createEvent('seen', gifId);
      this.fetchPingbackRequest(endpoint, action, userId, responseId);
    }
  }, {
    key: 'fetchPingbackRequest',
    value: function fetchPingbackRequest(endpoint, action, userId) {
      if (!eventTypes[endpoint]) {
        throw 'GIPHY ANALYTICS SDK ERROR IN on' + (action.action_type.charAt(0).toUpperCase() + action.action_type.slice(1)) + ' METHOD \n \tEndpoint argument \'' + endpoint + '\' does not match one of the following acceptable variables: \'search\', \'trending\', \'related\' or \'reactions\'';
      }
      // if there are no actions lined up inside this pingbackType do nothing
      var session = this.createSession(endpoint, action, userId);
      return fetch(url, {
        method: 'POST',
        body: JSON.stringify({
          sessions: [session]
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
  }, {
    key: 'createEvent',
    value: function createEvent(eventType, gifId) {
      return {
        action_type: eventType,
        ts: new Date().getTime(),
        gif_id: gifId
      };
    }
  }, {
    key: 'createSession',
    value: function createSession(endpoint, action, userId, responseId) {
      var pingbackSessionSchemas = {
        search: {
          user: {
            user_id: userId
          },
          events: [{
            event_type: eventTypes[endpoint],
            response_id: responseId,
            actions: [action]
          }]
        }
      };

      return pingbackSessionSchemas[endpoint];
    }
  }]);

  return GphAnalytics;
}();

module.exports = function (apiKey) {
  return new GphAnalytics(apiKey);
};